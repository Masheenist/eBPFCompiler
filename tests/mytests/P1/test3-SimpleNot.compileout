
Test File [/home/masheenist/source/lab4-lab4-hanscom-llosa/tests/mytests/test3-SimpleNot.py]
- - - - - - - -
x = 5
x != 3
print False- - - - - - - -
explicate Module(None, Stmt([Assign([AssName('x', 'OP_ASSIGN')], InjectFrom(Const(0), Const(5))), Discard(Let(Name('0'), Name('x'), Let(Name('1'), InjectFrom(Const(0), Const(3)), IfExp(Let(Name('5'), Compare(GetTag(Name('0')), [('==', Const(3))]), IfExp(Name('5'), Compare(GetTag(Name('1')), [('==', Const(3))]), Name('5'))), InjectFrom(Const(1), CallFunc('equal', [ProjectTo(Const(3), Name('0')), ProjectTo(Const(3), Name('1'))], None, None)), IfExp(Let(Name('4'), Let(Name('2'), Compare(GetTag(Name('0')), [('==', Const(0))]), IfExp(Name('2'), Compare(GetTag(Name('1')), [('==', Const(0))]), Name('2'))), IfExp(Not(Name('4')), Let(Name('3'), Compare(GetTag(Name('0')), [('==', Const(1))]), IfExp(Name('3'), Compare(GetTag(Name('1')), [('==', Const(1))]), Name('3'))), Name('4'))), InjectFrom(Const(1), Compare(ProjectTo(Const(0), Name('0')), [('!=', ProjectTo(Const(0), Name('1')))])), CallFunc('abort', [], None, None)))))), Discard(CallFunc('print_any', [InjectFrom(Const(1), Bool(False))], None, None))]))

final assembly file [/home/masheenist/source/lab4-lab4-hanscom-llosa/tests/mytests/test3-SimpleNot.py] :
.globl main
main:
	pushl %ebp
	movl %esp, %ebp
	movl %ebx, -0(%ebp)
	movl %edi, -4(%ebp)
	subl $8, %esp
	movl $5, %eax
	sall $2, %eax
	orl $0, %eax
	movl %eax, %edi
	movl $3, %eax
	sall $2, %eax
	orl $0, %eax
	movl %eax, %ebx
	movl %edi, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_0
	movl %ebx, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	jmp label_1
	label_0: 
	label_1: 
	cmpl $0, %eax
	je label_2
	movl %edi, %eax
	andl $-4, %eax
	movl %ebx, %ecx
	andl $-4, %ecx
	pushl %ecx
	pushl %eax
	call equal
	addl $8, %esp
	sall $2, %eax
	orl $1, %eax
	jmp label_3
	label_2: 
	movl %edi, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	je label_4
	movl %ebx, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	jmp label_5
	label_4: 
	movl %ecx, %eax
	label_5: 
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_6
	movl %edi, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %edx
	cmpl $0, %edx
	je label_8
	movl %ebx, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_9
	label_8: 
	movl %edx, %eax
	label_9: 
	jmp label_7
	label_6: 
	movl %ecx, %eax
	label_7: 
	cmpl $0, %eax
	je label_10
	movl %edi, %ecx
	sarl $2, %ecx
	movl %ebx, %eax
	sarl $2, %eax
	cmpl %ecx, %eax
	setne %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_11
	label_10: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_11: 
	movl %ecx, %eax
	label_3: 
	movl $0, %eax
	sall $2, %eax
	orl $1, %eax
	pushl %eax
	call print_any
	addl $4, %esp
	movl -4(%ebp), %edi
	movl -0(%ebp), %ebx
	movl $0, %eax
	leave
	ret



input: 


output: 
False

