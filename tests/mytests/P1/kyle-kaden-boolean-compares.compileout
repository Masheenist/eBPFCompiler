
Test File [/home/masheenist/source/lab4-lab4-hanscom-llosa/tests/mytests/kyle-kaden-boolean-compares.py]
- - - - - - - -
t = True
f = False

print t and f
print f and t
print t and t
print f and f

print t or f
print f or t
print t or t
print f or f

print not t
print not f

print t == f
print f == t
print t == t
print f == f

print t != f
print f != t
print t != t
print f != f
- - - - - - - -
explicate Module(None, Stmt([Assign([AssName('t', 'OP_ASSIGN')], InjectFrom(Const(1), Bool(True))), Assign([AssName('f', 'OP_ASSIGN')], InjectFrom(Const(1), Bool(False))), Discard(CallFunc('print_any', [Let(Name('0'), Name('t'), IfExp(IfExp(Compare(GetTag(Name('0')), [('==', Const(3))]), Not(Let(Name('2'), CallFunc('equal', [ProjectTo(Const(3), Name('0')), ProjectTo(Const(3), List([]))], None, None), IfExp(Not(Name('2')), CallFunc('equal', [ProjectTo(Const(3), Name('0')), ProjectTo(Const(3), Dict([]))], None, None), Name('2')))), IfExp(Let(Name('1'), Compare(GetTag(Name('0')), [('==', Const(0))]), IfExp(Not(Name('1')), Compare(GetTag(Name('0')), [('==', Const(1))]), Name('1'))), ProjectTo(Const(1), Name('0')), CallFunc('abort', [], None, None))), Name('f'), Name('0')))], None, None)), Discard(CallFunc('print_any', [Let(Name('3'), Name('f'), IfExp(IfExp(Compare(GetTag(Name('3')), [('==', Const(3))]), Not(Let(Name('5'), CallFunc('equal', [ProjectTo(Const(3), Name('3')), ProjectTo(Const(3), List([]))], None, None), IfExp(Not(Name('5')), CallFunc('equal', [ProjectTo(Const(3), Name('3')), ProjectTo(Const(3), Dict([]))], None, None), Name('5')))), IfExp(Let(Name('4'), Compare(GetTag(Name('3')), [('==', Const(0))]), IfExp(Not(Name('4')), Compare(GetTag(Name('3')), [('==', Const(1))]), Name('4'))), ProjectTo(Const(1), Name('3')), CallFunc('abort', [], None, None))), Name('t'), Name('3')))], None, None)), Discard(CallFunc('print_any', [Let(Name('6'), Name('t'), IfExp(IfExp(Compare(GetTag(Name('6')), [('==', Const(3))]), Not(Let(Name('8'), CallFunc('equal', [ProjectTo(Const(3), Name('6')), ProjectTo(Const(3), List([]))], None, None), IfExp(Not(Name('8')), CallFunc('equal', [ProjectTo(Const(3), Name('6')), ProjectTo(Const(3), Dict([]))], None, None), Name('8')))), IfExp(Let(Name('7'), Compare(GetTag(Name('6')), [('==', Const(0))]), IfExp(Not(Name('7')), Compare(GetTag(Name('6')), [('==', Const(1))]), Name('7'))), ProjectTo(Const(1), Name('6')), CallFunc('abort', [], None, None))), Name('t'), Name('6')))], None, None)), Discard(CallFunc('print_any', [Let(Name('9'), Name('f'), IfExp(IfExp(Compare(GetTag(Name('9')), [('==', Const(3))]), Not(Let(Name('11'), CallFunc('equal', [ProjectTo(Const(3), Name('9')), ProjectTo(Const(3), List([]))], None, None), IfExp(Not(Name('11')), CallFunc('equal', [ProjectTo(Const(3), Name('9')), ProjectTo(Const(3), Dict([]))], None, None), Name('11')))), IfExp(Let(Name('10'), Compare(GetTag(Name('9')), [('==', Const(0))]), IfExp(Not(Name('10')), Compare(GetTag(Name('9')), [('==', Const(1))]), Name('10'))), ProjectTo(Const(1), Name('9')), CallFunc('abort', [], None, None))), Name('f'), Name('9')))], None, None)), Discard(CallFunc('print_any', [Let(Name('12'), Name('t'), IfExp(Not(IfExp(Compare(GetTag(Name('12')), [('==', Const(3))]), Not(Let(Name('14'), CallFunc('equal', [ProjectTo(Const(3), Name('12')), ProjectTo(Const(3), List([]))], None, None), IfExp(Not(Name('14')), CallFunc('equal', [ProjectTo(Const(3), Name('12')), ProjectTo(Const(3), Dict([]))], None, None), Name('14')))), IfExp(Let(Name('13'), Compare(GetTag(Name('12')), [('==', Const(0))]), IfExp(Not(Name('13')), Compare(GetTag(Name('12')), [('==', Const(1))]), Name('13'))), ProjectTo(Const(1), Name('12')), CallFunc('abort', [], None, None)))), Name('f'), Name('12')))], None, None)), Discard(CallFunc('print_any', [Let(Name('15'), Name('f'), IfExp(Not(IfExp(Compare(GetTag(Name('15')), [('==', Const(3))]), Not(Let(Name('17'), CallFunc('equal', [ProjectTo(Const(3), Name('15')), ProjectTo(Const(3), List([]))], None, None), IfExp(Not(Name('17')), CallFunc('equal', [ProjectTo(Const(3), Name('15')), ProjectTo(Const(3), Dict([]))], None, None), Name('17')))), IfExp(Let(Name('16'), Compare(GetTag(Name('15')), [('==', Const(0))]), IfExp(Not(Name('16')), Compare(GetTag(Name('15')), [('==', Const(1))]), Name('16'))), ProjectTo(Const(1), Name('15')), CallFunc('abort', [], None, None)))), Name('t'), Name('15')))], None, None)), Discard(CallFunc('print_any', [Let(Name('18'), Name('t'), IfExp(Not(IfExp(Compare(GetTag(Name('18')), [('==', Const(3))]), Not(Let(Name('20'), CallFunc('equal', [ProjectTo(Const(3), Name('18')), ProjectTo(Const(3), List([]))], None, None), IfExp(Not(Name('20')), CallFunc('equal', [ProjectTo(Const(3), Name('18')), ProjectTo(Const(3), Dict([]))], None, None), Name('20')))), IfExp(Let(Name('19'), Compare(GetTag(Name('18')), [('==', Const(0))]), IfExp(Not(Name('19')), Compare(GetTag(Name('18')), [('==', Const(1))]), Name('19'))), ProjectTo(Const(1), Name('18')), CallFunc('abort', [], None, None)))), Name('t'), Name('18')))], None, None)), Discard(CallFunc('print_any', [Let(Name('21'), Name('f'), IfExp(Not(IfExp(Compare(GetTag(Name('21')), [('==', Const(3))]), Not(Let(Name('23'), CallFunc('equal', [ProjectTo(Const(3), Name('21')), ProjectTo(Const(3), List([]))], None, None), IfExp(Not(Name('23')), CallFunc('equal', [ProjectTo(Const(3), Name('21')), ProjectTo(Const(3), Dict([]))], None, None), Name('23')))), IfExp(Let(Name('22'), Compare(GetTag(Name('21')), [('==', Const(0))]), IfExp(Not(Name('22')), Compare(GetTag(Name('21')), [('==', Const(1))]), Name('22'))), ProjectTo(Const(1), Name('21')), CallFunc('abort', [], None, None)))), Name('f'), Name('21')))], None, None)), Discard(CallFunc('print_any', [Let(Name('24'), Name('t'), InjectFrom(Const(1), Not(IfExp(Compare(GetTag(Name('24')), [('==', Const(3))]), Not(Let(Name('26'), CallFunc('equal', [ProjectTo(Const(3), Name('24')), ProjectTo(Const(3), List([]))], None, None), IfExp(Not(Name('26')), CallFunc('equal', [ProjectTo(Const(3), Name('24')), ProjectTo(Const(3), Dict([]))], None, None), Name('26')))), IfExp(Let(Name('25'), Compare(GetTag(Name('24')), [('==', Const(0))]), IfExp(Not(Name('25')), Compare(GetTag(Name('24')), [('==', Const(1))]), Name('25'))), ProjectTo(Const(1), Name('24')), CallFunc('abort', [], None, None))))))], None, None)), Discard(CallFunc('print_any', [Let(Name('27'), Name('f'), InjectFrom(Const(1), Not(IfExp(Compare(GetTag(Name('27')), [('==', Const(3))]), Not(Let(Name('29'), CallFunc('equal', [ProjectTo(Const(3), Name('27')), ProjectTo(Const(3), List([]))], None, None), IfExp(Not(Name('29')), CallFunc('equal', [ProjectTo(Const(3), Name('27')), ProjectTo(Const(3), Dict([]))], None, None), Name('29')))), IfExp(Let(Name('28'), Compare(GetTag(Name('27')), [('==', Const(0))]), IfExp(Not(Name('28')), Compare(GetTag(Name('27')), [('==', Const(1))]), Name('28'))), ProjectTo(Const(1), Name('27')), CallFunc('abort', [], None, None))))))], None, None)), Discard(CallFunc('print_any', [Let(Name('30'), Name('t'), Let(Name('31'), Name('f'), IfExp(Let(Name('35'), Compare(GetTag(Name('30')), [('==', Const(3))]), IfExp(Name('35'), Compare(GetTag(Name('31')), [('==', Const(3))]), Name('35'))), InjectFrom(Const(1), CallFunc('equal', [ProjectTo(Const(3), Name('30')), ProjectTo(Const(3), Name('31'))], None, None)), IfExp(Let(Name('34'), Let(Name('32'), Compare(GetTag(Name('30')), [('==', Const(0))]), IfExp(Name('32'), Compare(GetTag(Name('31')), [('==', Const(0))]), Name('32'))), IfExp(Not(Name('34')), Let(Name('33'), Compare(GetTag(Name('30')), [('==', Const(1))]), IfExp(Name('33'), Compare(GetTag(Name('31')), [('==', Const(1))]), Name('33'))), Name('34'))), InjectFrom(Const(1), Compare(ProjectTo(Const(0), Name('30')), [('==', ProjectTo(Const(0), Name('31')))])), CallFunc('abort', [], None, None)))))], None, None)), Discard(CallFunc('print_any', [Let(Name('36'), Name('f'), Let(Name('37'), Name('t'), IfExp(Let(Name('41'), Compare(GetTag(Name('36')), [('==', Const(3))]), IfExp(Name('41'), Compare(GetTag(Name('37')), [('==', Const(3))]), Name('41'))), InjectFrom(Const(1), CallFunc('equal', [ProjectTo(Const(3), Name('36')), ProjectTo(Const(3), Name('37'))], None, None)), IfExp(Let(Name('40'), Let(Name('38'), Compare(GetTag(Name('36')), [('==', Const(0))]), IfExp(Name('38'), Compare(GetTag(Name('37')), [('==', Const(0))]), Name('38'))), IfExp(Not(Name('40')), Let(Name('39'), Compare(GetTag(Name('36')), [('==', Const(1))]), IfExp(Name('39'), Compare(GetTag(Name('37')), [('==', Const(1))]), Name('39'))), Name('40'))), InjectFrom(Const(1), Compare(ProjectTo(Const(0), Name('36')), [('==', ProjectTo(Const(0), Name('37')))])), CallFunc('abort', [], None, None)))))], None, None)), Discard(CallFunc('print_any', [Let(Name('42'), Name('t'), Let(Name('43'), Name('t'), IfExp(Let(Name('47'), Compare(GetTag(Name('42')), [('==', Const(3))]), IfExp(Name('47'), Compare(GetTag(Name('43')), [('==', Const(3))]), Name('47'))), InjectFrom(Const(1), CallFunc('equal', [ProjectTo(Const(3), Name('42')), ProjectTo(Const(3), Name('43'))], None, None)), IfExp(Let(Name('46'), Let(Name('44'), Compare(GetTag(Name('42')), [('==', Const(0))]), IfExp(Name('44'), Compare(GetTag(Name('43')), [('==', Const(0))]), Name('44'))), IfExp(Not(Name('46')), Let(Name('45'), Compare(GetTag(Name('42')), [('==', Const(1))]), IfExp(Name('45'), Compare(GetTag(Name('43')), [('==', Const(1))]), Name('45'))), Name('46'))), InjectFrom(Const(1), Compare(ProjectTo(Const(0), Name('42')), [('==', ProjectTo(Const(0), Name('43')))])), CallFunc('abort', [], None, None)))))], None, None)), Discard(CallFunc('print_any', [Let(Name('48'), Name('f'), Let(Name('49'), Name('f'), IfExp(Let(Name('53'), Compare(GetTag(Name('48')), [('==', Const(3))]), IfExp(Name('53'), Compare(GetTag(Name('49')), [('==', Const(3))]), Name('53'))), InjectFrom(Const(1), CallFunc('equal', [ProjectTo(Const(3), Name('48')), ProjectTo(Const(3), Name('49'))], None, None)), IfExp(Let(Name('52'), Let(Name('50'), Compare(GetTag(Name('48')), [('==', Const(0))]), IfExp(Name('50'), Compare(GetTag(Name('49')), [('==', Const(0))]), Name('50'))), IfExp(Not(Name('52')), Let(Name('51'), Compare(GetTag(Name('48')), [('==', Const(1))]), IfExp(Name('51'), Compare(GetTag(Name('49')), [('==', Const(1))]), Name('51'))), Name('52'))), InjectFrom(Const(1), Compare(ProjectTo(Const(0), Name('48')), [('==', ProjectTo(Const(0), Name('49')))])), CallFunc('abort', [], None, None)))))], None, None)), Discard(CallFunc('print_any', [Let(Name('54'), Name('t'), Let(Name('55'), Name('f'), IfExp(Let(Name('59'), Compare(GetTag(Name('54')), [('==', Const(3))]), IfExp(Name('59'), Compare(GetTag(Name('55')), [('==', Const(3))]), Name('59'))), InjectFrom(Const(1), CallFunc('equal', [ProjectTo(Const(3), Name('54')), ProjectTo(Const(3), Name('55'))], None, None)), IfExp(Let(Name('58'), Let(Name('56'), Compare(GetTag(Name('54')), [('==', Const(0))]), IfExp(Name('56'), Compare(GetTag(Name('55')), [('==', Const(0))]), Name('56'))), IfExp(Not(Name('58')), Let(Name('57'), Compare(GetTag(Name('54')), [('==', Const(1))]), IfExp(Name('57'), Compare(GetTag(Name('55')), [('==', Const(1))]), Name('57'))), Name('58'))), InjectFrom(Const(1), Compare(ProjectTo(Const(0), Name('54')), [('!=', ProjectTo(Const(0), Name('55')))])), CallFunc('abort', [], None, None)))))], None, None)), Discard(CallFunc('print_any', [Let(Name('60'), Name('f'), Let(Name('61'), Name('t'), IfExp(Let(Name('65'), Compare(GetTag(Name('60')), [('==', Const(3))]), IfExp(Name('65'), Compare(GetTag(Name('61')), [('==', Const(3))]), Name('65'))), InjectFrom(Const(1), CallFunc('equal', [ProjectTo(Const(3), Name('60')), ProjectTo(Const(3), Name('61'))], None, None)), IfExp(Let(Name('64'), Let(Name('62'), Compare(GetTag(Name('60')), [('==', Const(0))]), IfExp(Name('62'), Compare(GetTag(Name('61')), [('==', Const(0))]), Name('62'))), IfExp(Not(Name('64')), Let(Name('63'), Compare(GetTag(Name('60')), [('==', Const(1))]), IfExp(Name('63'), Compare(GetTag(Name('61')), [('==', Const(1))]), Name('63'))), Name('64'))), InjectFrom(Const(1), Compare(ProjectTo(Const(0), Name('60')), [('!=', ProjectTo(Const(0), Name('61')))])), CallFunc('abort', [], None, None)))))], None, None)), Discard(CallFunc('print_any', [Let(Name('66'), Name('t'), Let(Name('67'), Name('t'), IfExp(Let(Name('71'), Compare(GetTag(Name('66')), [('==', Const(3))]), IfExp(Name('71'), Compare(GetTag(Name('67')), [('==', Const(3))]), Name('71'))), InjectFrom(Const(1), CallFunc('equal', [ProjectTo(Const(3), Name('66')), ProjectTo(Const(3), Name('67'))], None, None)), IfExp(Let(Name('70'), Let(Name('68'), Compare(GetTag(Name('66')), [('==', Const(0))]), IfExp(Name('68'), Compare(GetTag(Name('67')), [('==', Const(0))]), Name('68'))), IfExp(Not(Name('70')), Let(Name('69'), Compare(GetTag(Name('66')), [('==', Const(1))]), IfExp(Name('69'), Compare(GetTag(Name('67')), [('==', Const(1))]), Name('69'))), Name('70'))), InjectFrom(Const(1), Compare(ProjectTo(Const(0), Name('66')), [('!=', ProjectTo(Const(0), Name('67')))])), CallFunc('abort', [], None, None)))))], None, None)), Discard(CallFunc('print_any', [Let(Name('72'), Name('f'), Let(Name('73'), Name('f'), IfExp(Let(Name('77'), Compare(GetTag(Name('72')), [('==', Const(3))]), IfExp(Name('77'), Compare(GetTag(Name('73')), [('==', Const(3))]), Name('77'))), InjectFrom(Const(1), CallFunc('equal', [ProjectTo(Const(3), Name('72')), ProjectTo(Const(3), Name('73'))], None, None)), IfExp(Let(Name('76'), Let(Name('74'), Compare(GetTag(Name('72')), [('==', Const(0))]), IfExp(Name('74'), Compare(GetTag(Name('73')), [('==', Const(0))]), Name('74'))), IfExp(Not(Name('76')), Let(Name('75'), Compare(GetTag(Name('72')), [('==', Const(1))]), IfExp(Name('75'), Compare(GetTag(Name('73')), [('==', Const(1))]), Name('75'))), Name('76'))), InjectFrom(Const(1), Compare(ProjectTo(Const(0), Name('72')), [('!=', ProjectTo(Const(0), Name('73')))])), CallFunc('abort', [], None, None)))))], None, None))]))

final assembly file [/home/masheenist/source/lab4-lab4-hanscom-llosa/tests/mytests/kyle-kaden-boolean-compares.py] :
.globl main
main:
	pushl %ebp
	movl %esp, %ebp
	movl %ebx, -72(%ebp)
	movl %edi, -76(%ebp)
	movl %esi, -80(%ebp)
	subl $84, %esp
	movl $1, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, -12(%ebp)
	movl $0, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, -20(%ebp)
	movl -12(%ebp), %eax
	movl %eax, -48(%ebp)
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_0
	movl -48(%ebp), %eax
	movl %eax, -60(%ebp)
	andl $-4, -60(%ebp)
	movl $0, %eax
	sall $2, %eax
	orl $0, %eax
	pushl %eax
	call create_list
	addl $4, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -60(%ebp)
	call equal
	addl $8, %esp
	movl %eax, -60(%ebp)
	cmpl $0, -60(%ebp)
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_2
	movl -48(%ebp), %eax
	movl %eax, -60(%ebp)
	andl $-4, -60(%ebp)
	call create_dict
	addl $0, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -60(%ebp)
	call equal
	addl $8, %esp
	movl %eax, %ecx
	jmp label_3
	label_2: 
	movl -60(%ebp), %ecx
	label_3: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	jmp label_1
	label_0: 
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_4
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_5
	label_4: 
	movl %ecx, %eax
	label_5: 
	cmpl $0, %eax
	je label_6
	movl -48(%ebp), %eax
	sarl $2, %eax
	movl %eax, %ecx
	jmp label_7
	label_6: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_7: 
	movl %ecx, %eax
	label_1: 
	cmpl $0, %eax
	je label_8
	movl -20(%ebp), %ecx
	jmp label_9
	label_8: 
	movl -48(%ebp), %ecx
	label_9: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -20(%ebp), %eax
	movl %eax, -48(%ebp)
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_10
	movl -48(%ebp), %eax
	movl %eax, -60(%ebp)
	andl $-4, -60(%ebp)
	movl $0, %eax
	sall $2, %eax
	orl $0, %eax
	pushl %eax
	call create_list
	addl $4, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -60(%ebp)
	call equal
	addl $8, %esp
	movl %eax, -72(%ebp)
	cmpl $0, -72(%ebp)
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_12
	movl -48(%ebp), %eax
	movl %eax, -60(%ebp)
	andl $-4, -60(%ebp)
	call create_dict
	addl $0, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -60(%ebp)
	call equal
	addl $8, %esp
	movl %eax, %ecx
	jmp label_13
	label_12: 
	movl -72(%ebp), %ecx
	label_13: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	jmp label_11
	label_10: 
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_14
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_15
	label_14: 
	label_15: 
	cmpl $0, %ecx
	je label_16
	movl -48(%ebp), %eax
	sarl $2, %eax
	jmp label_17
	label_16: 
	call abort
	addl $0, %esp
	label_17: 
	label_11: 
	cmpl $0, %eax
	je label_18
	movl -12(%ebp), %ecx
	jmp label_19
	label_18: 
	movl -48(%ebp), %ecx
	label_19: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -12(%ebp), %eax
	movl %eax, -48(%ebp)
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_20
	movl -48(%ebp), %eax
	movl %eax, -60(%ebp)
	andl $-4, -60(%ebp)
	movl $0, %eax
	sall $2, %eax
	orl $0, %eax
	pushl %eax
	call create_list
	addl $4, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -60(%ebp)
	call equal
	addl $8, %esp
	movl %eax, -64(%ebp)
	cmpl $0, -64(%ebp)
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_22
	movl -48(%ebp), %eax
	movl %eax, -60(%ebp)
	andl $-4, -60(%ebp)
	call create_dict
	addl $0, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -60(%ebp)
	call equal
	addl $8, %esp
	movl %eax, %ecx
	jmp label_23
	label_22: 
	movl -64(%ebp), %ecx
	label_23: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	jmp label_21
	label_20: 
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_24
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_25
	label_24: 
	label_25: 
	cmpl $0, %ecx
	je label_26
	movl -48(%ebp), %eax
	sarl $2, %eax
	jmp label_27
	label_26: 
	call abort
	addl $0, %esp
	label_27: 
	label_21: 
	cmpl $0, %eax
	je label_28
	movl -12(%ebp), %ecx
	jmp label_29
	label_28: 
	movl -48(%ebp), %ecx
	label_29: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -20(%ebp), %eax
	movl %eax, -48(%ebp)
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_30
	movl -48(%ebp), %eax
	movl %eax, -60(%ebp)
	andl $-4, -60(%ebp)
	movl $0, %eax
	sall $2, %eax
	orl $0, %eax
	pushl %eax
	call create_list
	addl $4, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -60(%ebp)
	call equal
	addl $8, %esp
	movl %eax, -68(%ebp)
	cmpl $0, -68(%ebp)
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_32
	movl -48(%ebp), %eax
	movl %eax, -60(%ebp)
	andl $-4, -60(%ebp)
	call create_dict
	addl $0, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -60(%ebp)
	call equal
	addl $8, %esp
	movl %eax, %ecx
	jmp label_33
	label_32: 
	movl -68(%ebp), %ecx
	label_33: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	jmp label_31
	label_30: 
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_34
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_35
	label_34: 
	label_35: 
	cmpl $0, %ecx
	je label_36
	movl -48(%ebp), %eax
	sarl $2, %eax
	jmp label_37
	label_36: 
	call abort
	addl $0, %esp
	label_37: 
	label_31: 
	cmpl $0, %eax
	je label_38
	movl -20(%ebp), %ecx
	jmp label_39
	label_38: 
	movl -48(%ebp), %ecx
	label_39: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -12(%ebp), %eax
	movl %eax, -48(%ebp)
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_40
	movl -48(%ebp), %eax
	movl %eax, -56(%ebp)
	andl $-4, -56(%ebp)
	movl $0, %eax
	sall $2, %eax
	orl $0, %eax
	pushl %eax
	call create_list
	addl $4, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -56(%ebp)
	call equal
	addl $8, %esp
	movl %eax, -56(%ebp)
	cmpl $0, -56(%ebp)
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_42
	movl -48(%ebp), %eax
	movl %eax, -56(%ebp)
	andl $-4, -56(%ebp)
	call create_dict
	addl $0, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -56(%ebp)
	call equal
	addl $8, %esp
	movl %eax, %ecx
	jmp label_43
	label_42: 
	movl -56(%ebp), %ecx
	label_43: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_41
	label_40: 
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_44
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_45
	label_44: 
	movl %ecx, %eax
	label_45: 
	cmpl $0, %eax
	je label_46
	movl -48(%ebp), %eax
	sarl $2, %eax
	movl %eax, %ecx
	jmp label_47
	label_46: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_47: 
	label_41: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_48
	movl -20(%ebp), %ecx
	jmp label_49
	label_48: 
	movl -48(%ebp), %ecx
	label_49: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -20(%ebp), %eax
	movl %eax, -48(%ebp)
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_50
	movl -48(%ebp), %eax
	movl %eax, -40(%ebp)
	andl $-4, -40(%ebp)
	movl $0, %eax
	sall $2, %eax
	orl $0, %eax
	pushl %eax
	call create_list
	addl $4, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -40(%ebp)
	call equal
	addl $8, %esp
	movl %eax, -40(%ebp)
	cmpl $0, -40(%ebp)
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_52
	movl -48(%ebp), %eax
	movl %eax, -40(%ebp)
	andl $-4, -40(%ebp)
	call create_dict
	addl $0, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -40(%ebp)
	call equal
	addl $8, %esp
	movl %eax, %ecx
	jmp label_53
	label_52: 
	movl -40(%ebp), %ecx
	label_53: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_51
	label_50: 
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_54
	movl -48(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_55
	label_54: 
	label_55: 
	cmpl $0, %ecx
	je label_56
	movl -48(%ebp), %eax
	sarl $2, %eax
	jmp label_57
	label_56: 
	call abort
	addl $0, %esp
	label_57: 
	movl %eax, %ecx
	label_51: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_58
	movl -12(%ebp), %ecx
	jmp label_59
	label_58: 
	movl -48(%ebp), %ecx
	label_59: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -12(%ebp), %eax
	movl %eax, -40(%ebp)
	movl -40(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %ecx
	cmpl $0, %ecx
	je label_60
	movl -40(%ebp), %eax
	movl %eax, -32(%ebp)
	andl $-4, -32(%ebp)
	movl $0, %eax
	sall $2, %eax
	orl $0, %eax
	pushl %eax
	call create_list
	addl $4, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -32(%ebp)
	call equal
	addl $8, %esp
	movl %eax, -32(%ebp)
	cmpl $0, -32(%ebp)
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_62
	movl -40(%ebp), %eax
	movl %eax, -32(%ebp)
	andl $-4, -32(%ebp)
	call create_dict
	addl $0, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -32(%ebp)
	call equal
	addl $8, %esp
	movl %eax, %ecx
	jmp label_63
	label_62: 
	movl -32(%ebp), %ecx
	label_63: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	jmp label_61
	label_60: 
	movl -40(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_64
	movl -40(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_65
	label_64: 
	label_65: 
	cmpl $0, %ecx
	je label_66
	movl -40(%ebp), %eax
	sarl $2, %eax
	jmp label_67
	label_66: 
	call abort
	addl $0, %esp
	label_67: 
	label_61: 
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_68
	movl -12(%ebp), %ecx
	jmp label_69
	label_68: 
	movl -40(%ebp), %ecx
	label_69: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -20(%ebp), %eax
	movl %eax, -32(%ebp)
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_70
	movl -32(%ebp), %eax
	movl %eax, -40(%ebp)
	andl $-4, -40(%ebp)
	movl $0, %eax
	sall $2, %eax
	orl $0, %eax
	pushl %eax
	call create_list
	addl $4, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -40(%ebp)
	call equal
	addl $8, %esp
	movl %eax, -52(%ebp)
	cmpl $0, -52(%ebp)
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_72
	movl -32(%ebp), %eax
	movl %eax, -40(%ebp)
	andl $-4, -40(%ebp)
	call create_dict
	addl $0, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -40(%ebp)
	call equal
	addl $8, %esp
	movl %eax, %ecx
	jmp label_73
	label_72: 
	movl -52(%ebp), %ecx
	label_73: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_71
	label_70: 
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_74
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_75
	label_74: 
	label_75: 
	cmpl $0, %ecx
	je label_76
	movl -32(%ebp), %eax
	sarl $2, %eax
	jmp label_77
	label_76: 
	call abort
	addl $0, %esp
	label_77: 
	movl %eax, %ecx
	label_71: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_78
	movl -20(%ebp), %ecx
	jmp label_79
	label_78: 
	movl -32(%ebp), %ecx
	label_79: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -12(%ebp), %eax
	movl %eax, -32(%ebp)
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %ecx
	cmpl $0, %ecx
	je label_80
	movl -32(%ebp), %eax
	movl %eax, -40(%ebp)
	andl $-4, -40(%ebp)
	movl $0, %eax
	sall $2, %eax
	orl $0, %eax
	pushl %eax
	call create_list
	addl $4, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -40(%ebp)
	call equal
	addl $8, %esp
	movl %eax, -44(%ebp)
	cmpl $0, -44(%ebp)
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_82
	movl -32(%ebp), %eax
	movl %eax, -32(%ebp)
	andl $-4, -32(%ebp)
	call create_dict
	addl $0, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl -32(%ebp)
	call equal
	addl $8, %esp
	movl %eax, %ecx
	jmp label_83
	label_82: 
	movl -44(%ebp), %ecx
	label_83: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	jmp label_81
	label_80: 
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_84
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_85
	label_84: 
	label_85: 
	cmpl $0, %ecx
	je label_86
	movl -32(%ebp), %eax
	sarl $2, %eax
	jmp label_87
	label_86: 
	call abort
	addl $0, %esp
	label_87: 
	label_81: 
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	pushl %eax
	call print_any
	addl $4, %esp
	movl -20(%ebp), %eax
	movl %eax, -32(%ebp)
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %ecx
	cmpl $0, %ecx
	je label_88
	movl -32(%ebp), %edi
	andl $-4, %edi
	movl $0, %eax
	sall $2, %eax
	orl $0, %eax
	pushl %eax
	call create_list
	addl $4, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl %edi
	call equal
	addl $8, %esp
	movl %eax, %edi
	cmpl $0, %edi
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_90
	movl -32(%ebp), %edi
	andl $-4, %edi
	call create_dict
	addl $0, %esp
	addl $3, %eax
	andl $-4, %eax
	pushl %eax
	pushl %edi
	call equal
	addl $8, %esp
	movl %eax, %ecx
	jmp label_91
	label_90: 
	movl %edi, %ecx
	label_91: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	jmp label_89
	label_88: 
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_92
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_93
	label_92: 
	label_93: 
	cmpl $0, %ecx
	je label_94
	movl -32(%ebp), %eax
	sarl $2, %eax
	jmp label_95
	label_94: 
	call abort
	addl $0, %esp
	label_95: 
	label_89: 
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	pushl %eax
	call print_any
	addl $4, %esp
	movl -12(%ebp), %eax
	movl %eax, %edi
	movl -20(%ebp), %eax
	movl %eax, -32(%ebp)
	movl %edi, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_96
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	jmp label_97
	label_96: 
	label_97: 
	cmpl $0, %eax
	je label_98
	movl %edi, %eax
	andl $-4, %eax
	movl -32(%ebp), %ecx
	andl $-4, %ecx
	pushl %ecx
	pushl %eax
	call equal
	addl $8, %esp
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_99
	label_98: 
	movl %edi, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	je label_100
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	jmp label_101
	label_100: 
	movl %ecx, %eax
	label_101: 
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_102
	movl %edi, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, -8(%ebp)
	cmpl $0, -8(%ebp)
	je label_104
	movl -32(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_105
	label_104: 
	movl -8(%ebp), %eax
	label_105: 
	jmp label_103
	label_102: 
	movl %ecx, %eax
	label_103: 
	cmpl $0, %eax
	je label_106
	movl %edi, %eax
	sarl $2, %eax
	movl -32(%ebp), %ecx
	sarl $2, %ecx
	cmpl %ecx, %eax
	sete %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_107
	label_106: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_107: 
	label_99: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -20(%ebp), %eax
	movl %eax, %edi
	movl -12(%ebp), %eax
	movl %eax, -8(%ebp)
	movl %edi, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_108
	movl -8(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	jmp label_109
	label_108: 
	label_109: 
	cmpl $0, %eax
	je label_110
	movl %edi, %eax
	andl $-4, %eax
	movl -8(%ebp), %ecx
	andl $-4, %ecx
	pushl %ecx
	pushl %eax
	call equal
	addl $8, %esp
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_111
	label_110: 
	movl %edi, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_112
	movl -8(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	jmp label_113
	label_112: 
	movl %eax, %ecx
	label_113: 
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_114
	movl %edi, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, -24(%ebp)
	cmpl $0, -24(%ebp)
	je label_116
	movl -8(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_117
	label_116: 
	movl -24(%ebp), %eax
	label_117: 
	jmp label_115
	label_114: 
	movl %ecx, %eax
	label_115: 
	cmpl $0, %eax
	je label_118
	movl %edi, %eax
	sarl $2, %eax
	movl -8(%ebp), %ecx
	sarl $2, %ecx
	cmpl %ecx, %eax
	sete %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_119
	label_118: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_119: 
	label_111: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -12(%ebp), %eax
	movl %eax, -8(%ebp)
	movl -12(%ebp), %eax
	movl %eax, %edi
	movl -8(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_120
	movl %edi, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	jmp label_121
	label_120: 
	label_121: 
	cmpl $0, %eax
	je label_122
	movl -8(%ebp), %eax
	andl $-4, %eax
	movl %edi, %ecx
	andl $-4, %ecx
	pushl %ecx
	pushl %eax
	call equal
	addl $8, %esp
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_123
	label_122: 
	movl -8(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	je label_124
	movl %edi, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	jmp label_125
	label_124: 
	movl %ecx, %eax
	label_125: 
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_126
	movl -8(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, -16(%ebp)
	cmpl $0, -16(%ebp)
	je label_128
	movl %edi, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_129
	label_128: 
	movl -16(%ebp), %eax
	label_129: 
	jmp label_127
	label_126: 
	movl %ecx, %eax
	label_127: 
	cmpl $0, %eax
	je label_130
	movl -8(%ebp), %ecx
	sarl $2, %ecx
	movl %edi, %eax
	sarl $2, %eax
	cmpl %eax, %ecx
	sete %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_131
	label_130: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_131: 
	label_123: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -20(%ebp), %eax
	movl %eax, -8(%ebp)
	movl -20(%ebp), %eax
	movl %eax, %edi
	movl -8(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_132
	movl %edi, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	jmp label_133
	label_132: 
	label_133: 
	cmpl $0, %eax
	je label_134
	movl -8(%ebp), %eax
	andl $-4, %eax
	movl %edi, %ecx
	andl $-4, %ecx
	pushl %ecx
	pushl %eax
	call equal
	addl $8, %esp
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_135
	label_134: 
	movl -8(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	je label_136
	movl %edi, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	jmp label_137
	label_136: 
	movl %ecx, %eax
	label_137: 
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_138
	movl -8(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, -4(%ebp)
	cmpl $0, -4(%ebp)
	je label_140
	movl %edi, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_141
	label_140: 
	movl -4(%ebp), %eax
	label_141: 
	jmp label_139
	label_138: 
	movl %ecx, %eax
	label_139: 
	cmpl $0, %eax
	je label_142
	movl -8(%ebp), %eax
	sarl $2, %eax
	movl %edi, %ecx
	sarl $2, %ecx
	cmpl %ecx, %eax
	sete %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_143
	label_142: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_143: 
	label_135: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -12(%ebp), %eax
	movl %eax, -4(%ebp)
	movl -20(%ebp), %eax
	movl %eax, %edi
	movl -4(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_144
	movl %edi, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	jmp label_145
	label_144: 
	label_145: 
	cmpl $0, %eax
	je label_146
	movl -4(%ebp), %eax
	andl $-4, %eax
	movl %edi, %ecx
	andl $-4, %ecx
	pushl %ecx
	pushl %eax
	call equal
	addl $8, %esp
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_147
	label_146: 
	movl -4(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	je label_148
	movl %edi, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	jmp label_149
	label_148: 
	movl %ecx, %eax
	label_149: 
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_150
	movl -4(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, -36(%ebp)
	cmpl $0, -36(%ebp)
	je label_152
	movl %edi, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_153
	label_152: 
	movl -36(%ebp), %eax
	label_153: 
	jmp label_151
	label_150: 
	movl %ecx, %eax
	label_151: 
	cmpl $0, %eax
	je label_154
	movl -4(%ebp), %eax
	sarl $2, %eax
	movl %edi, %ecx
	sarl $2, %ecx
	cmpl %eax, %ecx
	setne %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_155
	label_154: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_155: 
	label_147: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -20(%ebp), %eax
	movl %eax, %edi
	movl -12(%ebp), %eax
	movl %eax, -4(%ebp)
	movl %edi, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_156
	movl -4(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	jmp label_157
	label_156: 
	label_157: 
	cmpl $0, %eax
	je label_158
	movl %edi, %eax
	andl $-4, %eax
	movl -4(%ebp), %ecx
	andl $-4, %ecx
	pushl %ecx
	pushl %eax
	call equal
	addl $8, %esp
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_159
	label_158: 
	movl %edi, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	je label_160
	movl -4(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	jmp label_161
	label_160: 
	movl %ecx, %eax
	label_161: 
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_162
	movl %edi, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, -28(%ebp)
	cmpl $0, -28(%ebp)
	je label_164
	movl -4(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_165
	label_164: 
	movl -28(%ebp), %eax
	label_165: 
	jmp label_163
	label_162: 
	movl %ecx, %eax
	label_163: 
	cmpl $0, %eax
	je label_166
	movl %edi, %ecx
	sarl $2, %ecx
	movl -4(%ebp), %eax
	sarl $2, %eax
	cmpl %ecx, %eax
	setne %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_167
	label_166: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_167: 
	label_159: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -12(%ebp), %eax
	movl %eax, %edi
	movl -12(%ebp), %eax
	movl %eax, -4(%ebp)
	movl %edi, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_168
	movl -4(%ebp), %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	jmp label_169
	label_168: 
	label_169: 
	cmpl $0, %eax
	je label_170
	movl %edi, %eax
	andl $-4, %eax
	movl -4(%ebp), %ecx
	andl $-4, %ecx
	pushl %ecx
	pushl %eax
	call equal
	addl $8, %esp
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_171
	label_170: 
	movl %edi, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	je label_172
	movl -4(%ebp), %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	jmp label_173
	label_172: 
	movl %ecx, %eax
	label_173: 
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_174
	movl %edi, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %esi
	cmpl $0, %esi
	je label_176
	movl -4(%ebp), %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_177
	label_176: 
	movl %esi, %eax
	label_177: 
	jmp label_175
	label_174: 
	movl %ecx, %eax
	label_175: 
	cmpl $0, %eax
	je label_178
	movl %edi, %ecx
	sarl $2, %ecx
	movl -4(%ebp), %eax
	sarl $2, %eax
	cmpl %ecx, %eax
	setne %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_179
	label_178: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_179: 
	label_171: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -20(%ebp), %edi
	movl -20(%ebp), %esi
	movl %edi, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_180
	movl %esi, %eax
	andl $3, %eax
	cmpl $3, %eax
	sete %al
	movzbl %al, %eax
	jmp label_181
	label_180: 
	label_181: 
	cmpl $0, %eax
	je label_182
	movl %edi, %eax
	andl $-4, %eax
	movl %esi, %ecx
	andl $-4, %ecx
	pushl %ecx
	pushl %eax
	call equal
	addl $8, %esp
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_183
	label_182: 
	movl %edi, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ecx
	cmpl $0, %ecx
	je label_184
	movl %esi, %eax
	andl $3, %eax
	cmpl $0, %eax
	sete %al
	movzbl %al, %eax
	jmp label_185
	label_184: 
	movl %ecx, %eax
	label_185: 
	movl %eax, %ecx
	cmpl $0, %ecx
	sete %al
	movzbl %al, %eax
	cmpl $0, %eax
	je label_186
	movl %edi, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	movl %eax, %ebx
	cmpl $0, %ebx
	je label_188
	movl %esi, %eax
	andl $3, %eax
	cmpl $1, %eax
	sete %al
	movzbl %al, %eax
	jmp label_189
	label_188: 
	movl %ebx, %eax
	label_189: 
	jmp label_187
	label_186: 
	movl %ecx, %eax
	label_187: 
	cmpl $0, %eax
	je label_190
	movl %edi, %ecx
	sarl $2, %ecx
	movl %esi, %eax
	sarl $2, %eax
	cmpl %ecx, %eax
	setne %al
	movzbl %al, %eax
	sall $2, %eax
	orl $1, %eax
	movl %eax, %ecx
	jmp label_191
	label_190: 
	call abort
	addl $0, %esp
	movl %eax, %ecx
	label_191: 
	label_183: 
	pushl %ecx
	call print_any
	addl $4, %esp
	movl -80(%ebp), %esi
	movl -76(%ebp), %edi
	movl -72(%ebp), %ebx
	movl $0, %eax
	leave
	ret



output: 
False
False
True
False
True
True
True
False
False
True
False
False
True
True
True
True
False
False

